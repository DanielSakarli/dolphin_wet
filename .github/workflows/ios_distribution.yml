# This workflow is executed on specific triggers and creates an .api file for
# the download on iOS devices. With this, there is no need for a macOS (virtual)
# machine with XCode to deploy the app for iOS. Still, an Apple Developer Account
# is needed to create the necessary certificates and provisioning profiles.

name: ios_distribution

on: [push] #, pull_request

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.16.0'

    - name: Install dependencies
      run: npm ci
      working-directory: Code/frontend

    #- name: Add iOS platform
    #  run: npx cap add ios
    #  working-directory: Code/frontend

    #- name: Sync with iOS platform
    #  run: npx cap sync ios
    #  working-directory: Code/frontend

    - name: Build Ionic App
      run: npm run build
      working-directory: Code/frontend

    - name: Copy to iOS platform
      run: npx cap copy
      working-directory: Code/frontend

    - name: Sync with iOS platform
      run: npx cap sync ios
      working-directory: Code/frontend

    - name: Install CocoaPods
      run: sudo gem install cocoapods

    - name: Install iOS dependencies
      run: |
        DEVELOPMENT_TEAM_ID=${{ secrets.DEVELOPMENT_TEAM_ID }}
        pod install
      working-directory: Code/frontend/ios/App
      env:
        DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
  
    - name: Install Fastlane
      run: sudo gem install fastlane -NV
      working-directory: Code/frontend/ios/App

    - name: Set Development Team ID and Enable Automatic Signing for All Targets
      run: |
        DEVELOPMENT_TEAM_ID="${{ secrets.DEVELOPMENT_TEAM_ID }}"
        PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}"
        PROJECT_FILE_PATH="Code/frontend/ios/App/App.xcodeproj/project.pbxproj"
    
        if [ -z "$DEVELOPMENT_TEAM_ID" ]; then
          echo "Development Team ID is required"
          exit 1
        fi

        # Use sed to set the development team ID and enable automatic signing in the project file
        sed -i '' "s/DEVELOPMENT_TEAM = [^;]*;/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM_ID;/g" $PROJECT_FILE_PATH
        # sed -i '' "s/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g" $PROJECT_FILE_PATH
        sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER="TO_BE_REPLACED_DURING_BUILD_PROVISIONING_PROFILE";/PROVISIONING_PROFILE_SPECIFIER = $PROVISIONING_PROFILE_SPECIFIER;/g" $PROJECT_FILE_PATH
        sed -i '' "s/CODE_SIGN_IDENTITY = \"iPhone Developer\";/CODE_SIGN_IDENTITY = \"iPhone Distribution\";/g" $PROJECT_FILE_PATH
        sed -i '' "s/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g" $PROJECT_FILE_PATH
    
        # Verify the changes
        echo "Verifying the project file changes..."
        grep -C 3 "DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM_ID" $PROJECT_FILE_PATH
        grep -C 3 "PROVISIONING_PROFILE_SPECIFIER = $PROVISIONING_PROFILE_SPECIFIER" $PROJECT_FILE_PATH
      shell: bash

    #- name: Output Pods.xcodeproj file
    #  run: cat Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj

    - name: Adjust setting in Pods.xcodeproj file
      run: |
        DEVELOPMENT_TEAM_ID="${{ secrets.DEVELOPMENT_TEAM_ID }}"
        PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}"
        
        # Make changes to the pods project file
        sed -i '' 's/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "iPhone Distribution";/g' Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "";/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "iPhone Distribution";/g' Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' "s/DEVELOPMENT_TEAM = [^;]*;/DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM_ID;/g" Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' "s/DevelopmentTeam = [^;]*;/DevelopmentTeam = $DEVELOPMENT_TEAM_ID;/g" Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER="TO_BE_REPLACED_DURING_BUILD_PROVISIONING_PROFILE";/PROVISIONING_PROFILE_SPECIFIER = $PROVISIONING_PROFILE_SPECIFIER;/g" Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj

        # Verify the changes
        echo "Verifying the project file changes for the team ID..."
        grep -C 3 "DEVELOPMENT_TEAM = $DEVELOPMENT_TEAM_ID" Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
        echo "Verifying the project file changes for the code sign style..."
        grep -C 3 "CODE_SIGN_STYLE = $CODE_SIGN_STYLE" Code/frontend/ios/App/Pods/Pods.xcodeproj/project.pbxproj
      shell: bash

    - name: Configure Git for Authentication
      run: |
        git config --global user.email "daniel-sakarli@hotmail.de"
        git config --global user.name "DanielSakarli"
        git remote set-url origin https://github.com/${{ github.repository }}
        git remote set-url --push origin https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Ensure Keychain Does Not Exist
      run: |
        if security list-keychains | grep -q "~/Library/Keychains/ios-build.keychain"; then
          echo "Keychain exists, deleting it."
          security delete-keychain ~/Library/Keychains/ios-build.keychain
        fi

    - name: Create Keychain
      run: |
        security create-keychain -p ${{ secrets.MATCH_PASSWORD }} ios-build.keychain          
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/ios-build.keychain
        security unlock-keychain -p ${{ secrets.MATCH_PASSWORD }} ~/Library/Keychains/ios-build.keychain
        security list-keychains -s ~/Library/Keychains/ios-build.keychain
        security list-keychains -d user # List keychains to verify
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  
    #- name: Decrypt Certificates and Profiles
    #  run: fastlane match appstore --readonly
    #  working-directory: Code/frontend/ios/App
    #  env:
    #    MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  
    - name: Build and sign iOS App
      run: |
        echo "API_KEY_ID is set to: ${API_KEY_ID:0:4}***"
        fastlane ios build
      #working-directory: Code/frontend/ios/App
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
        API_KEY_ID: ${{ secrets.API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
        API_AUTH_KEY: ${{ secrets.API_AUTH_KEY }}
        DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: iOS App
        path: ${{ github.workspace }}/Code/frontend/build/App.xcarchive