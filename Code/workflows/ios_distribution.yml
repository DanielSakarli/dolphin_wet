# This workflow is executed on specific triggers and creates an .api file for
# the download on iOS devices. With this, there is no need for a macOS (virtual)
# machine with XCode to deploy the app for iOS. Still, an Apple Developer Account
# is needed to create the necessary certificates and provisioning profiles.

name: ios_distribution

on: [push] #, pull_request

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.16.0'

    - name: Install dependencies
      run: npm ci
      working-directory: Code/frontend

    - name: Build Ionic App
      run: npm run build
      working-directory: Code/frontend

    - name: Copy to iOS platform
      run: npx cap copy
      working-directory: Code/frontend

    - name: Install CocoaPods
      run: sudo gem install cocoapods

    - name: Install iOS dependencies
      run: cd ios && pod install && cd ..
      working-directory: Code/frontend

    - name: Build iOS App
      run: npx cap open ios
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        CODE_SIGNING_REQUIRED: YES
      working-directory: Code/frontend

    - name: Archive iOS App
      run: |
        xcodebuild -workspace ios/App/App.xcworkspace -scheme App -sdk iphoneos -configuration AppStoreDistribution archive -archivePath $PWD/build/App.xcarchive
        xcodebuild -exportArchive -archivePath $PWD/build/App.xcarchive -exportOptionsPlist exportOptions.plist -exportPath $PWD/build
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      working-directory: Code/frontend

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: iOS App
        path: ${{ github.workspace }}/Code/frontend/build/App.ipa