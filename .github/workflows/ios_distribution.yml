# This workflow is executed on specific triggers and creates an .api file for
# the download on iOS devices. With this, there is no need for a macOS (virtual)
# machine with XCode to deploy the app for iOS. Still, an Apple Developer Account
# is needed to create the necessary certificates and provisioning profiles.

name: ios_distribution

on: [push] #, pull_request

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.16.0'

    - name: Install dependencies
      run: npm ci
      working-directory: Code/frontend

    - name: Add iOS platform
      run: npx cap add ios
      working-directory: Code/frontend

    #- name: Sync with iOS platform
    #  run: npx cap sync ios
    #  working-directory: Code/frontend

    - name: Build Ionic App
      run: npm run build
      working-directory: Code/frontend

    - name: Copy to iOS platform
      run: npx cap copy
      working-directory: Code/frontend

    - name: Install CocoaPods
      run: sudo gem install cocoapods

    - name: Install iOS dependencies
      run: pod install #cd ios && pod install && cd ..
      working-directory: Code/frontend/ios/App

    - name: Install Fastlane
      run: sudo gem install fastlane -NV

    - name: Build and sign iOS App
      run: fastlane ios build
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: iOS App
        path: ${{ github.workspace }}/Code/frontend/build/App.xcarchive