require 'base64'
require 'match'

default_platform(:ios)

platform :ios do
  desc "Build and archive the app"
  lane :build do
    API_KEY_ID = ENV['API_KEY_ID']
    API_ISSUER_ID = ENV['API_ISSUER_ID']
    DEVELOPMENT_TEAM_ID = ENV['DEVELOPMENT_TEAM_ID']
    MATCH_PASSWORD = ENV['MATCH_PASSWORD']
    GH_TOKEN = ENV['GH_TOKEN']
    MATCH_BRANCH = ENV['MATCH_BRANCH']

    puts "API_KEY_ID: #{API_KEY_ID}"
    puts "API_ISSUER_ID: #{API_ISSUER_ID}"
    puts "API_AUTH_KEY: #{ENV['API_AUTH_KEY']}"
    puts "Development Team ID: #{ENV['DEVELOPMENT_TEAM_ID']}"
    
    # Create a temporary keychain to install the certificate on the running macOS machine
    #create_keychain(
    #  name: "temp_keychain", 
    #  password: MATCH_PASSWORD,
    #  default_keychain: true,
    #  unlock: true,
    #  timeout: 3600,
    #  lock_when_sleeps: true
    #)

    #sh("ls #{Dir.pwd}/../certs/distribution")
    #sh("file #{Dir.pwd}/../certs/distribution/V5THZ4JXS9.cer")
    #sh("file #{Dir.pwd}/../certs/distribution/V5THZ4JXS9.p12")
    #sh("cat #{Dir.pwd}/../certs/distribution/V5THZ4JXS9.cer")
    #sh("cat #{Dir.pwd}/../certs/distribution/V5THZ4JXS9.p12")
    
    # Decrypt the certificate
    #puts "Arrived at the decryption section"
    #storage = Match::Storage.from_params({storage_mode: "git", git_url: "https://#{GH_TOKEN}@github.com/DanielSakarli/dolphin_wet", shallow_clone: false, git_branch: MATCH_BRANCH, clone_branch_directly: false})
    #storage.download
    #puts "Accessed Git repo"
    #encryption = Match::Encryption.for_storage_mode("git", { git_url: "https://#{GH_TOKEN}@github.com/DanielSakarli/dolphin_wet", working_directory: storage.working_directory})
    #encryption.decrypt_files
    #storage.working_directory

    #puts "Storage working directory: #{storage.working_directory}"

    # Import the .cer certificate into the keychain
    #import_certificate(
    #  certificate_path: "#{Dir.pwd}/../certs/distribution/V5THZ4JXS9.cer",
    #  keychain_name: "temp_keychain"
    #)

    # Import the .p12 certificate into the keychain
    #import_certificate(
    #  certificate_path: "#{Dir.pwd}/../certs/distribution/V5THZ4JXS9.p12",
    #  certificate_password: MATCH_PASSWORD,
    #  keychain_name: "temp_keychain"
    #)

    # Specify Xcode version
    xcversion(version: "15.0.1")

    # Decode and write the API auth key
    File.open("AuthKey_#{API_KEY_ID}.p8", 'wb') do |file|
      file.write(Base64.decode64(ENV['API_AUTH_KEY']))
    end

    puts "Current directory: #{Dir.pwd}"
    puts "Directory contents: #{Dir.entries('.')}"
    puts "Key file name: AuthKey_#{API_KEY_ID}.p8"
    puts "Key file permissions: #{File.stat("AuthKey_#{API_KEY_ID}.p8").mode.to_s(8)}"

    # Fetch API key for App Store Connect
    api_key = app_store_connect_api_key(
      key_id: API_KEY_ID,
      issuer_id: API_ISSUER_ID,
      #Change the location of the key file, encode it using base64, push it to git repo and then decode it in the github action workflow
      key_filepath: "#{Dir.pwd}/AuthKey_#{API_KEY_ID}.p8",
      duration: 1200,
      in_house: false, # optional but may be required if using match/sigh
    )
    puts "Keychains:"
    sh("ls ~/Library/Keychains")
    #sh("ls #{Dir.pwd}/../fastlane/plugin/wwdr_cert")
    #fastlane_require "#{Dir.pwd}/../fastlane/plugin/wwdr_cert/AppleWWDRCA.cer"
    
    # Ensure the WWDR certificate is installed
    # Gets the Pluginfile of the fastlane and installs the WWDR certificate
    #WWDRCert::Actions::InstallWWDRCertAction.run
    # Import the WWDR certificate into the keychain
    #sh("security import #{Dir.pwd}/../fastlane/plugin/wwdr_cert/AppleWWDRCA.cer -k ~/Library/Keychains/temp_keychain-db")

    # Debugging: Check if the WWDR certificate is correctly imported
    #sh("security find-certificate -a -c 'Apple Worldwide Developer Relations Certification Authority' ~/Library/Keychains/temp_keychain-db")

    # Debugging: Check if the keychain is unlocked
    #sh("security show-keychain-info ~/Library/Keychains/temp_keychain-db")

    
    # match fetches signing certificates and provisioning profiles 
    match(
      type: "appstore",
      readonly: false,
      git_url: "https://#{GH_TOKEN}@github.com/DanielSakarli/dolphin_wet",
      app_identifier: "com.dolphinwetapp.dolphinwet",
      team_id: DEVELOPMENT_TEAM_ID,
      #keychain_name: "temp_keychain",
      keychain_password: MATCH_PASSWORD,
      api_key: api_key, # ensure correct api key is uesd for App Store Connect
      git_branch: MATCH_BRANCH, # branch to be cloned
      #Try this if cloning git repo takes too long:
      #clone_branch_directly: true, # clone the branch directly
    )

    

    # Set key partition list (required for accessing the keychain)
    #set_keychain_settings(
    #  keychain_name: "temp_keychain",
    #  timeout: 3600,
    #  lock_when_sleeps: true,
    #  use_keychain_list: true
    #)

    # Build and archive the app using gym
    gym(
      workspace: "#{Dir.pwd}/../Code/frontend/ios/App/App.xcworkspace", #navigating to the correct path of the xcworkspace
      scheme: "App",
      sdk: "iphoneos",
      configuration: "AppStoreDistribution",
      archive_path: "#{Dir.pwd}/build/App.xcarchive",
      clean: true, # Set to false to skip cleaning,
      codesigning_identity: "-", # Use the automatic signing --> manages and updates the provisioning profile
      export_options: {
        method: "app-store",
        provisioningProfiles: {
            "com.dolphinwetapp.dolphinwet": "match AppStore com.dolphinwetapp.dolphinwet"
        },
        signingStyle: "automatic",
        developmentTeam: DEVELOPMENT_TEAM_ID #Found in apple developer account
      }
    ) 

    # Delete the key file after it's used
    File.delete("AuthKey_#{ENV['API_KEY_ID']}.p8")

    # Delete the temporary keychain
    delete_keychain(name: "temp_keychain")

  end
end